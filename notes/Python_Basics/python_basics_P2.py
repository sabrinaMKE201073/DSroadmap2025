# -*- coding: utf-8 -*-
"""Python basics learn april 2025 part 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1be1IamloB4ATQmJVjeV_f9fPp9odQoEP
"""

import numpy as np
import matplotlib.pyplot as plt
np.random.seed(123)
final_tails = []
for x in range (100):
  tails = [0]
  for x in range (10):
    coin = np.random.randint(0,2)
    tails.append(tails[x] + coin)
  final_tails.append(tails[-1])
print(final_tails)

import numpy as np
import matplotlib.pyplot as plt
np.random.seed(123)
final_tails = []
for x in range (100):
  tails = [0]
  for x in range (10):
    coin = np.random.randint(0,2)
    tails.append(tails[x] + coin)
  final_tails.append(tails[-1])
plt.hist(final_tails, bins = 10)
plt.show()

#histogram 1,000 runs
import numpy as np
import matplotlib.pyplot as plt
np.random.seed(123)
final_tails = []
for x in range (1000):
  tails = [0]
  for x in range (10):
    coin = np.random.randint(0,2)
    tails.append(tails[x] + coin)
  final_tails.append(tails[-1])
plt.hist(final_tails, bins = 10)
plt.show()

#histogram 10,000 runs
import numpy as np
import matplotlib.pyplot as plt
np.random.seed(123)
final_tails = []
for x in range (10000):
  tails = [0]
  for x in range (10):
    coin = np.random.randint(0,2)
    tails.append(tails[x] + coin)
  final_tails.append(tails[-1])
plt.hist(final_tails, bins = 10)
plt.show()

# numpy and matplotlib imported, seed set.

# initialize and populate all_walks
all_walks = []
for i in range(5) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        random_walk.append(step)
    all_walks.append(random_walk)

# Convert all_walks to NumPy array: np_aw
np_aw = np.array(all_walks)

# Plot np_aw and show
plt.plot(np_aw)
plt.show()

# Clear the figure
plt.clf()

# Transpose np_aw: np_aw_t
np_aw_t = np.transpose(np_aw)

# Plot np_aw_t and show
plt.plot (np_aw_t)
plt.show()

# numpy and matplotlib imported, seed set

# clear the plot so it doesn't get cluttered if you run this many times
plt.clf()

# Simulate random walk 20 times
all_walks = []
for i in range(20) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)

        # Implement clumsiness
        if np.random.rand() <= 0.005 :
            step = 0

        random_walk.append(step)
    all_walks.append(random_walk)

# Create and plot np_aw_t
np_aw_t = np.transpose(np.array(all_walks))
plt.plot(np_aw_t)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

np.random.seed(123)  # Seed set

# Simulate random walk 500 times
all_walks = []
for i in range(500):
    random_walk = [0]
    for x in range(100):
        step = random_walk[-1]
        dice = np.random.randint(1, 7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1, 7)
        if np.random.rand() <= 0.001:
            step = 0
        random_walk.append(step)
    all_walks.append(random_walk)

# Create and plot np_aw_t
np_aw_t = np.transpose(np.array(all_walks))

# Select last row from np_aw_t: ends
ends = np_aw_t[-1, :]

# Plot histogram of ends, display plot
plt.hist(ends)
plt.show()

#Calculate the odds
count = 0
for end in ends:
    if end >= 60:
        count += 1
chance = count / 500
print(chance)

x = ["a","b","c","d"]

x[:] and x[:-1]

x[1:] and x[:4]

x[-3:]and x[1:]

6/8

"""**New Topic: Data Manipulation with PANDAS**"""

import numpy as np
numpy1 = np.array([17.2, 20.0, 8.25, 9.50])
numpy2 = np.array([13.0, 24.0, 8.25, 9.0])
print(numpy1[numpy1>numpy2])

"""JOINING DATA with PANDAS"""

x = [-1,-2]
del(x[0])
print(x[0])

x = ["d","a","t","a"]
print(x[1])

seasons = ["spring", "summer", "fall", "winter"]
del(seasons[1])
print(seasons[1])
