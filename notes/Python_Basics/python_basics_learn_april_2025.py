# -*- coding: utf-8 -*-
"""Python basics learn april 2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KMBC0HUHz3_EZdMwFEWdxXfJS6cdwdgU

# **LIST METHODS**

*   .index(), to get the index of the first element of a list that matches its input
*   .count(), to get the number of times an element appears in a list.
"""

# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Print out the index of the element 20.0
print (areas.index(20.0))

# Print out how often 9.50 appears in areas
print (areas.count(9.50))

"""

*   .append(), that adds an element to the list it is called

*   .remove(), that removes the first element of a list that matches the input

*   .reverse(), that reverses the order of the elements in the list it is called on



"""

# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Use append twice to add poolhouse and garage size
areas.append (24.5)
areas.append (15.45)

# Print out areas
print(areas)

# Reverse the orders of the elements in areas
areas.reverse()

# Print out areas
print(areas)

"""# PACKAGES

Packages = directory of python scripts
Each script = module

Eg of Packages;
- NumPy (calculation)
- Matplotlib (data visualization)
- Scikit-learn (for ML)
"""

import numpy as np
np.array([1, 2, 3])

#another method can used this line for long script
#to use array function later
from numpy import array
array([1, 2, 3])

#PRACTICE TIME

# MATH FORMULA
# Circumference, C = 2(Pi)r
# Area, A = Pi(r)**2
# ** refer to exponential/known as square of

# Import the math package
import math

# Calculate C
C = 2 * 0.43 * math.pi

# Calculate A
A = math.pi * 0.43 ** 2

print("Circumference: " + str(C))
print("Area: " + str(A))

"""# NUMPY"""

# Import the numpy package as np
import numpy as np

baseball = [180, 215, 210, 210, 188, 176, 209, 200]

# Create a numpy array from baseball: np_baseball
np_baseball = np.array(baseball)

# Print out type of np_baseball
print(type(np_baseball))

"""**17 April (NUMPY)**"""

import numpy as np

# Example dummy data (you can use real MLB data if you have it)
weight_lb = [150 + i for i in range(200)]     # 200 sample weights
height_in = [65 + (i % 10) for i in range(200)]  # 200 sample heights

np_weight_lb = np.array(weight_lb)
np_height_in = np.array(height_in)

# Print out the weight at index 50
print (np_weight_lb[50])

# Print out sub-array of np_height_in: index 100 up to and including index 110
print(np_height_in[100:111])

import numpy as np

baseball = [[180, 78.4],
            [215, 102.7],
            [210, 98.5],
            [188, 75.2]]

# Create a 2D numpy array from baseball: np_baseball
np_baseball = np.array(baseball)

# Print out the type of np_baseball
print(type(np_baseball))

# Print out the shape of np_baseball
print("shape of np_baseball:", np_baseball.shape)

#Baseball data in 2D form

import numpy as np

#mock example data
# Create mock data: 130 players with random [height, weight]
# Format: [height (in inches), weight (in pounds)]
baseball = [[180 + (i % 10), 75 + (i % 20)] for i in range(130)]

np_baseball = np.array(baseball)

# Print out the 50th row of np_baseball
print(np_baseball[49,:])

# Select the entire second column of np_baseball: np_weight_lb
np_weight_lb = np_baseball[:,1]
print(np_weight_lb)

# Print out height of 124th player
print("height of 124th player:", np_baseball[123,0])

import numpy as np

# Example data for baseball (height in inches, weight in lbs, age in years)
baseball = [[180, 78.4, 25],
            [215, 102.7, 30],
            [210, 98.5, 28],
            [188, 75.2, 24]]

# Example updates: change in height, weight, and age
updated = [[1, 0.5, 1],
           [0, -0.5, 0],
           [2, 1.0, 1],
           [-1, -1.5, -1]]

# Convert both to NumPy arrays
np_baseball = np.array(baseball)
updated = np.array(updated)

# Print out addition of np_baseball and updated
print("Updated baseball data:\n", np_baseball + updated)

# Create numpy array: conversion (inch→meter, lb→kg, age stays the same)
conversion = np.array([0.0254, 0.453592, 1])

# Print out product of np_baseball and conversion (element-wise broadcasting)
print("Metric baseball data:\n", np_baseball * conversion)

import numpy as np

# Example data (height, weight, age)
baseball = [[180, 78.4, 25],
            [215, 102.7, 30],
            [210, 98.5, 28],
            [188, 75.2, 24]]

# Convert to NumPy array
np_baseball = np.array(baseball)

# Create np_height_in from np_baseball
np_height_in = np.array(np_baseball[:,0])

# Print out the mean of np_height_in
print("mean:",np.mean(np_height_in))

# Print out the median of np_height_in
print("median:",np.median(np_height_in))

"""**np.mean()** → Average height

**np.median()** → Middle value when sorted

**np.std()** → Standard deviation (how spread out the heights are)

**np.corrcoef(col1, col2)** → Returns a 2×2 correlation matrix. The value at [0,1] or [1,0] is the correlation between height and weight.
"""

import numpy as np

# Example data: [height (in), weight (lb), age]
baseball = [[180, 78.4, 25],
            [215, 102.7, 30],
            [210, 98.5, 28],
            [188, 75.2, 24]]

# Convert to numpy array
np_baseball = np.array(baseball)

avg = np.mean(np_baseball[:,0])
print("Average: " + str(avg))

# Print median height
med = np.median(np_baseball[:,0])
print("Median: " + str(med))

# Print out the standard deviation on height
stddev = np.std(np_baseball[:,0])
print("Standard Deviation: " + str(stddev))

# Print out correlation between first and second column
corr = np.corrcoef(np_baseball[:,0],np_baseball[:,1])
print("Correlation:\n" + str(corr))

"""# **BASIC matplotlib.pyplot as plt**


*   Line plot
*   Scatter plot


*   Histogram




"""

# Print the last item from year and pop
year = [1950,1970,1990,2010]
pop = [2.519, 3.692, 5.263, 6.972]

print(year[-1])
print(pop[-1])

# Import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Make a line plot: year on the x-axis, pop on the y-axis
plt.plot(year,pop)

# Display the plot with plt.show()
plt.show()

# Print the last item from year and pop
print(year[-1])
print(pop[-1])

# Import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Make a line plot: year on the x-axis, pop on the y-axis
plt.plot(year, pop)

# Display the plot with plt.show()
plt.show()

import matplotlib.pyplot as plt

# Provide actual data for gdp_cap and life_exp
# Here's a small sample; replace with full lists as needed
gdp_cap = [974.58, 5937.03, 6223.37, 4797.23, 12779.38, 34435.37, 36126.49]
life_exp = [43.83, 76.42, 72.30, 42.73, 75.32, 81.76, 79.44]

# Print the last item of gdp_cap and life_exp
print("Last GDP per capita:", gdp_cap[-1])
print("Last Life Expectancy:", life_exp[-1])

# Make a line plot
plt.plot(gdp_cap, life_exp)

# Add labels and title (optional but good practice)
plt.xlabel('GDP per Capita (USD)')
plt.ylabel('Life Expectancy (years)')
plt.title('Life Expectancy vs GDP per Capita')

# Display the plot
plt.show()

# Change the line plot below to a scatter plot
plt.scatter(gdp_cap, life_exp)

# Put the x-axis on a logarithmic scale
plt.xscale('log')

# Show plot
plt.show()

# Import matplotlib (should already be available in Colab)
import matplotlib.pyplot as plt

# Sample life_exp data – replace with the full list as needed
life_exp = [43.8, 76.4, 72.3, 42.7, 75.3, 81.8, 79.4, 78.6, 48.3, 76.5, 60.2, 72.0]

# Create histogram of life_exp data
plt.hist(life_exp)

# Add labels and title (optional, but recommended)
plt.xlabel('Life Expectancy')
plt.ylabel('Number of Countries')
plt.title('Distribution of Life Expectancy (2007)')

# Display histogram
plt.show()

values = [0, 0.6, 1.4, 1.6, 2.2, 2.5, 2.6, 3.2, 3.5, 3.9, 4.2, 6]

plt.hist(values, bins=3)
plt.show()

#19 april
# Import matplotlib
import matplotlib.pyplot as plt

# Example data (replace these with your actual data)
gdp_cap = [974.5803384, 5937.029525, 6223.367465, 4797.231267]
life_exp = [43.828, 76.423, 72.301, 42.731]

# Basic scatter plot, log scale
plt.scatter(gdp_cap, life_exp)
plt.xscale('log')

# Strings
xlab = 'GDP per Capita [in USD]'
ylab = 'Life Expectancy [in years]'
title = 'World Development in 2007'

# Add axis labels
plt.xlabel(xlab)
plt.ylabel(ylab)

# Add title
plt.title(title)

# After customizing, display the plot
plt.show()

#Scatter plot
plt.scatter(gdp_cap, life_exp)

# Previous customizations
plt.xscale('log')
plt.xlabel('GDP per Capita [in USD]')
plt.ylabel('Life Expectancy [in years]')
plt.title('World Development in 2007')

# Definition of tick_val and tick_lab
tick_val = [1000, 10000, 100000]
tick_lab = ['1k', '10k', '100k']

# Adapt the ticks on the x-axis
plt.xticks(tick_val,tick_lab)

# After customizing, display the plot
plt.show()

# Import required library
import matplotlib.pyplot as plt

# Example data (replace with your actual data)
gdp_cap = [974.58, 5937.03, 6223.37, 4797.23, 12779.38, 34435.37]
life_exp = [43.83, 76.42, 72.30, 42.73, 75.32, 81.76]

# Scatter plot
plt.scatter(gdp_cap, life_exp)

# Previous customizations
plt.xscale('log')
plt.xlabel('GDP per Capita [in USD]')
plt.ylabel('Life Expectancy [in years]')
plt.title('World Development in 2007')

# Definition of tick_val and tick_lab
tick_val = [1000, 10000, 100000]
tick_lab = ['1k', '10k', '100k']

# Adapt the ticks on the x-axis
plt.xticks(tick_val, tick_lab)

# After customizing, display the plot
plt.show()

# Import libraries
import numpy as np
import matplotlib.pyplot as plt

# Example data (replace with your real data)
gdp_cap = [974.58, 5937.03, 6223.37, 4797.23, 12779.38, 34435.37]
life_exp = [43.83, 76.42, 72.30, 42.73, 75.32, 81.76]
pop = [31.89, 3.47, 33.76, 12.42, 40.30, 20.43]
region = ['Asia', 'Europe', 'Africa', 'Americas', 'Asia', 'Oceania']  # example regions

# Color mapping dictionary
color_dict = {
    'Asia': 'red',
    'Europe': 'green',
    'Africa': 'blue',
    'Americas': 'yellow',
    'Oceania': 'black'
}

# Create a list of colors based on region
col = [color_dict[r] for r in region]

# Specify c and alpha inside plt.scatter()
plt.scatter(x=gdp_cap,
            y=life_exp,
            s=np.array(pop) * 2,
            c=col,
            alpha=0.8)

# Previous customizations
plt.xscale('log')
plt.xlabel('GDP per Capita [in USD]')
plt.ylabel('Life Expectancy [in years]')
plt.title('World Development in 2007')
plt.xticks([1000, 10000, 100000], ['1k', '10k', '100k'])

# Show the plot
plt.show()

"""# **DICTIONARIES PART 1**"""

# Definition of countries and capital
countries = ['spain', 'france', 'germany', 'norway']
capitals = ['madrid', 'paris', 'berlin', 'oslo']

# Get index of 'germany': ind_ger
ind_ger = countries.index('germany')

# Use ind_ger to print out capital of Germany
print(capitals[ind_ger])

#example dictionary
my_dict = {
   "key1":"value1",
   "key2":"value2",
}

#call out key2 value
my_dict["key2"]

# Definition of countries and capital
countries = ['spain', 'france', 'germany', 'norway']
capitals = ['madrid', 'paris', 'berlin', 'oslo']

# From string in countries and capitals, create dictionary europe
europe = {'spain':'madrid', 'france':'paris' ,
        'germany':'berlin','norway':'oslo'}

# Print europe
print(europe)

# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }

# Print out the keys in europe
print (europe.keys())

#print out the values in europe
print (europe.values())

# Print out value that belongs to key 'norway'
print (europe['norway'])

# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }

# Add italy to europe
europe['italy'] = 'rome'

# Print out italy in europe
print ('italy' in europe)

# Add poland to europe
europe['poland'] = 'warsaw'

# Print europe
print(europe)

# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'bonn',
          'norway':'oslo', 'italy':'rome', 'poland':'warsaw',
          'australia':'vienna' }

# Update capital of germany
europe['germany'] = 'berlin'
europe

# Remove australia
del(europe['australia'])

# Print europe
print(europe)

# Dictionary of dictionaries
europe = { 'spain': { 'capital':'madrid', 'population':46.77 },
           'france': { 'capital':'paris', 'population':66.03 },
           'germany': { 'capital':'berlin', 'population':80.62 },
           'norway': { 'capital':'oslo', 'population':5.084 } }


# Print out the capital of France
print (europe['france']['capital'])

# Create sub-dictionary data
data = {'capital':'rome', 'population':59.83}

# Add data to europe under key 'italy'
europe['italy'] = data

# Print europe
print(europe)

"""# **PANDAS**

- HIGH LEVEL DATA MANIPULATION TOOL
- BUILT ON NUMPY
- DATAFRAME
"""

# Pre-defined lists
names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']
dr =  [True, False, False, False, True, True, True]
cpc = [809, 731, 588, 18, 200, 70, 45]

# Import pandas as pd
import pandas as pd

# Create dictionary my_dict with three key:value pairs: my_dict
my_dict = {'country':names, 'drives_right':dr,
           'cars_per_cap':cpc}

# Build a DataFrame cars from my_dict: cars
cars = pd.DataFrame(my_dict)

# Print cars
print(cars)

fruits = {
    'apples':{'cost':3, 'units':100},
    'bananas':{'cost':1, 'units':80},
    'grapes':{'cost':5, 'units':500}
}

print(fruits['bananas']['units'])

x = [1,2,3,4,5]
print(x[1:4])

import numpy as np
np_heights = np.array([[1.75,1.65,1.8,1.5],[1.56,1.70,1.4,1.29],[1.49,1.68,1.3,1.8]])
np.sort(np_heights[0])
print(np.median(np_heights[:,0]))

q = [20, 11, 48, 1, 17, 47]
print(len(q))

import numpy as np
p = np.array([15,5,6,6])
print(p[0])

y = "this is a random sentence"
print(y.upper())

import numpy as np
x = np.array(["Jan", "Feb", "Mar", "Apr"])
print(x[0:4])

import numpy as np
x = np.array([10, 23, 14, 27])
y = np.array([3, 5, 7, 26])
z = np.array([x, y])
print(z.shape)

np.array([True, 1, 2]) + np.array([3, 4, False])

import numpy as np
np.array([0, True, "python"])

import numpy as np
np_arr1 = np.array([1,2,3,4])
np_arr2 = np.array([5,6,7,8])
print(np.column_stack((np_arr1, np_arr2)))

"""# **Comparison operators**

- Numpy recap
- Numeric comparisons
"""

"carl"<"chris"

3 < 4.1

import numpy as np
bmi = np.array([21.852, 20.975, 21.75, 24.747, 21.441])
bmi

bmi>23

print(type(bmi))

2 == (1 + 1)
"intermediate" != "python"
True != False
"Python" != "python"

# Comparison of booleans
print(True == False)

# Comparison of integers
print((-5*15) != 75)

# Comparison of strings
print("pyscript" == "PyScript")

# Compare a boolean with an integer
print(True == 1)

print(3 < 4)
print(3 <= 4)
print("alpha" <= "beta")

# Comparison of integers
x = -3 * 6
print(x >= (-10))

# Comparison of strings
y = "test"
print ("test" <= y)

# Comparison of booleans
print (True > False)

my_kitchen = 18.0
your_kitchen = 14.0

print(my_kitchen > 10 and my_kitchen < 18)

print(my_kitchen < 14 or my_kitchen > 17)

# Define variables
my_kitchen = 18.0
your_kitchen = 14.0

# my_kitchen bigger than 10 and smaller than 18?
print(my_kitchen > 10 and my_kitchen < 18)

# my_kitchen smaller than 14 or bigger than 17?
print((my_kitchen < 14) or (my_kitchen > 17))

# Double my_kitchen smaller than triple your_kitchen?
print((2*my_kitchen)<(3*your_kitchen))

x = 8
y = 9
not(not(x < 3) and not(y > 14 or y > 10))

# Create arrays
import numpy as np
my_house = np.array([18.0, 20.0, 10.75, 9.50])
your_house = np.array([14.0, 24.0, 14.25, 9.0])

# my_house greater than 18.5 or smaller than 10
print(np.logical_or(my_house>18.5,my_house<10))

# Both my_house and your_house smaller than 11
print(np.logical_and(my_house<11,your_house<11))

area = 10.0
if(area < 9) :
    print("small")
elif(area < 12) :
    print("medium")
else :
    print("large")

"""# **Filtering Pandas DataFrame**

```
# While loop
"""

x = 1
while x < 4 :
    print(x)
    x = x + 1

error = 50.0
while error > 1 :
    error = error / 4
    print(error)

#exercise on datacamp
# Initialize offset
offset = 8

# Code the while loop
while offset!= 0:
    print("correcting...")
    offset = offset - 1
    print(offset)

# Initialize offset
offset = -6

# Code the while loop
while offset != 0:
    print("correcting...")
    offset = offset + 1  # move offset towards 0
    print(offset)

# Initialize offset
offset = -6

# Code the while loop
while offset != 0:
    print("correcting...")
    if offset > 0:
        offset = offset - 1
    else:
        offset = offset + 1
    print(offset)

fam = [1.73, 1.68, 1.71, 1.89]
for height in fam :
    print(height)

# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Code the for loop
for area in areas :
    print(area)

fam = [1.73, 1.68, 1.71, 1.89]
for index, height in enumerate(fam) :
    print("person " + str(index) + ": " + str(height))

# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Change for loop to use enumerate() and update print()
for index, area in enumerate(areas) :
    print("room " + str(index) + ": " + str(area))

# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Change for loop to use enumerate() and update print()
for index, area in enumerate(areas):
    print("room " + str(index + 1) + ": " + str(area))

# house list of lists
house = [["hallway", 11.25],
         ["kitchen", 18.0],
         ["living room", 20.0],
         ["bedroom", 10.75],
         ["bathroom", 9.50]]

# Build a for loop from scratch
for room, area in house:
     print("the " + str(room) + " is " + str(area) + " sqm")

# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin',
          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' }

# Iterate over europe
for k, v in europe.items():
    print ("the capital of " + str(k) + " is " + str(v))

# NumPy is imported, seed is set
import numpy as np

# Starting step
step = 50

# Roll the dice
dice = np.random.randint(1,7)
print("Dice roll: " + str(dice))

# Finish the control construct
if dice <= 2 :
    step = step - 1
elif dice <=5 :
    step = step + 1
else:
    step = step + np.random.randint(1,7)

# Print out dice and step
print("Step:", step)

import numpy as np
np.random.seed(123)
outcomes = []
for x in range(10):
  coin = np.random.randint(0,2)
  if coin ==0:
    outcomes.append("heads")
  else:
    outcomes.append("tails")
print(outcomes)

import numpy as np
np.random.seed(123)
tails = [0]
for x in range(10):
  coin = np.random.randint(0,2)
  tails.append(tails[x] + coin)
print(tails)

# NumPy is imported, seed is set

# Initialize random_walk
random_walk = [0]

for x in range(100) :
    step = random_walk[-1]
    dice = np.random.randint(1,7)

    if dice <= 2:
        # Replace below: use max to make sure step can't go below 0
        step = max (10,step - 1)
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    random_walk.append(step)

print(random_walk)

# NumPy is imported, seed is set

# Initialize random_walk
random_walk = [0]

for x in range(100) :
    step = random_walk[-1]
    dice = np.random.randint(1,7)

    if dice <= 2:
        # Replace below: use max to make sure step can't go below 0
        step = max (0,step - 1)
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    random_walk.append(step)

print(random_walk)

# NumPy is imported, seed is set

# Initialization
random_walk = [0]

for x in range(100) :
    step = random_walk[-1]
    dice = np.random.randint(1,7)

    if dice <= 2:
        step = max(0, step - 1)
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    random_walk.append(step)

# Import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Plot random_walk
plt.plot(random_walk)

# Show the plot
plt.show()